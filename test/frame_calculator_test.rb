require 'minitest/autorun'
require_relative '../lib/frame_calculator'

class FrameCalculatorTest < Minitest::Test
  GAME_ROLL_FRAMES = [
    [[], []],

    # test n
    [[2], [nil]],
    [[2,4], [6]],
    [[2,4,8], [6,nil]],
    [[2,4,8,0], [6,8]],

    # test /
    [[3,'/'], [nil]],
    [[4,'/',5], [15,nil]],
    [[4,'/',5,0], [15,5]],
    [[7,'/',3,'/'], [13,nil]],
    [[7,'/','X'], [20,nil]],
    [[7,2,1,'/'], [9,nil]],
    [[7,2,1,'/',8], [9,18,nil]],
    [[7,2,1,'/',8,1], [9,18,9]],
    [[7,2,1,'/',8,'/'], [9,18,nil]],
    [[7,2,1,'/',8,'/',9], [9,18,19,nil]],

    # # test x
    [['X'], [nil]],
    [['X','X'], [nil,nil]],
    [['X','X','X'], [30,nil,nil]],
    [[4,5,'X'],[9,nil]],
    [[4,5,'X', 'X'],[9,nil,nil]],
    [[4,5,'X','X',9], [9,29,nil,nil]],
    [[4,5,'X','X',9,'/'], [9,29,20,nil]],
    [['X',5,'/'], [20,nil]],
    [[5,'/','X'], [20,nil]],

    # 10th frame
    [[0,9,1,8,2,7,3,6,4,5,5,4,6,3,7,2,8,1,9,0], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9]],
    [[0,9,1,8,2,7,3,6,4,5,5,4,6,3,7,2,8,1,'X',3,3], [9, 9, 9, 9, 9, 9, 9, 9, 9, 16]],
    [[0,9,1,8,2,7,3,6,4,5,5,4,6,3,7,2,8,1,'X','X',3], [9, 9, 9, 9, 9, 9, 9, 9, 9, 23]],
    [[0,9,1,8,2,7,3,6,4,5,5,4,6,3,7,2,8,1,'X','X','X'], [9, 9, 9, 9, 9, 9, 9, 9, 9, 30]],

    ## 9nth frame
    [[0,9,1,8,2,7,3,6,4,5,5,4,6,3,7,2,5,4,2,2], [9, 9, 9, 9, 9, 9, 9, 9, 9, 4]],
    [[0,9,1,8,2,7,3,6,4,5,5,4,6,3,7,2,5,'/',2,2], [9, 9, 9, 9, 9, 9, 9, 9, 12, 4]],
    [[0,9,1,8,2,7,3,6,4,5,5,4,6,3,7,2,5,'/','X',2,2], [9, 9, 9, 9, 9, 9, 9, 9, 20, 14]],
    [[0,9,1,8,2,7,3,6,4,5,5,4,6,3,7,2,5,'/','X','X',2], [9, 9, 9, 9, 9, 9, 9, 9, 20, 22]],

    [[0,9,1,8,2,7,3,6,4,5,5,4,6,3,7,2,'X',1,2], [9, 9, 9, 9, 9, 9, 9, 9, 13, 3]],
    [[0,9,1,8,2,7,3,6,4,5,5,4,6,3,7,2,'X',5,'/',3], [9, 9, 9, 9, 9, 9, 9, 9, 20, 13]],
    [[0,9,1,8,2,7,3,6,4,5,5,4,6,3,7,2,'X','X','X','X'], [9, 9, 9, 9, 9, 9, 9, 9, 30, 30]],

    # perfect game
    [['X','X','X','X','X','X','X','X','X','X','X','X'], [30, 30, 30, 30, 30, 30, 30, 30, 30, 30]],

    # test extra garbage rolls
    [[0,9,1,8,2,7,3,6,4,5,5,4,6,3,7,2,8,1,9,0,3,4,5,6,3,2,5], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9]],
    [[0,9,1,8,2,7,3,6,4,5,5,4,6,3,7,2,8,1,'X',3,3,'/',4], [9, 9, 9, 9, 9, 9, 9, 9, 9, 16]],
    [[0,9,1,8,2,7,3,6,4,5,5,4,6,3,7,2,8,1,'X','X',3,'X',4,2], [9, 9, 9, 9, 9, 9, 9, 9, 9, 23]],
    [[0,9,1,8,2,7,3,6,4,5,5,4,6,3,7,2,8,1,'X','X','X','X','X','X'], [9, 9, 9, 9, 9, 9, 9, 9, 9, 30]],

    # other
    [[4, 5, "X", 8], [9, nil, nil]],
    [[4, 5, "X", 8, 1], [9, 19, 9]]
  ]

  def test_frames
    GAME_ROLL_FRAMES.each do |roll_frames|
      frames = FrameCalculator.calculate(roll_frames[0])
      assert_equal(roll_frames[1], frames)
    end
  end

  def test_invalid_roll
    assert_raises(RuntimeError) do
      FrameCalculator.calculate([3,5,'E'])
    end

    assert_raises(RuntimeError) do
      FrameCalculator.calculate(['X',4,'/',nil])
    end

    assert_raises(RuntimeError) do
      FrameCalculator.calculate([4.5, 2])
    end

    assert_raises(RuntimeError) do
      FrameCalculator.calculate([6,2,10])
    end
  end
end